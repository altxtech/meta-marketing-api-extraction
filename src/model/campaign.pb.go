// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: model/campaign.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                        int64                  `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BidStrategy                      string                 `protobuf:"bytes,3,opt,name=bid_strategy,json=bidStrategy,proto3" json:"bid_strategy,omitempty"`
	BoostedObjectId                  int64                  `protobuf:"varint,4,opt,name=boosted_object_id,json=boostedObjectId,proto3" json:"boosted_object_id,omitempty"`
	BudgetRebalanceFlag              bool                   `protobuf:"varint,5,opt,name=budget_rebalance_flag,json=budgetRebalanceFlag,proto3" json:"budget_rebalance_flag,omitempty"`
	BudgetRemaining                  int64                  `protobuf:"varint,6,opt,name=budget_remaining,json=budgetRemaining,proto3" json:"budget_remaining,omitempty"`
	BuyingType                       string                 `protobuf:"bytes,7,opt,name=buying_type,json=buyingType,proto3" json:"buying_type,omitempty"`
	CanCreateBrandLiftStudy          bool                   `protobuf:"varint,8,opt,name=can_create_brand_lift_study,json=canCreateBrandLiftStudy,proto3" json:"can_create_brand_lift_study,omitempty"`
	CanUseSpendCap                   bool                   `protobuf:"varint,9,opt,name=can_use_spend_cap,json=canUseSpendCap,proto3" json:"can_use_spend_cap,omitempty"`
	ConfiguredStatus                 string                 `protobuf:"bytes,10,opt,name=configured_status,json=configuredStatus,proto3" json:"configured_status,omitempty"`
	CreatedTime                      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	DailyBudget                      int64                  `protobuf:"varint,12,opt,name=daily_budget,json=dailyBudget,proto3" json:"daily_budget,omitempty"`
	EffectiveStatus                  string                 `protobuf:"bytes,13,opt,name=effective_status,json=effectiveStatus,proto3" json:"effective_status,omitempty"`
	HasSecondarySkadnetworkReporting bool                   `protobuf:"varint,14,opt,name=has_secondary_skadnetwork_reporting,json=hasSecondarySkadnetworkReporting,proto3" json:"has_secondary_skadnetwork_reporting,omitempty"`
	IsBudgetScheduleEnabled          bool                   `protobuf:"varint,15,opt,name=is_budget_schedule_enabled,json=isBudgetScheduleEnabled,proto3" json:"is_budget_schedule_enabled,omitempty"`
	IsSkadnetworkAttribution         bool                   `protobuf:"varint,16,opt,name=is_skadnetwork_attribution,json=isSkadnetworkAttribution,proto3" json:"is_skadnetwork_attribution,omitempty"`
	LastBudgetTogglingTime           *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=last_budget_toggling_time,json=lastBudgetTogglingTime,proto3" json:"last_budget_toggling_time,omitempty"`
	LifetimeBudget                   int64                  `protobuf:"varint,18,opt,name=lifetime_budget,json=lifetimeBudget,proto3" json:"lifetime_budget,omitempty"`
	Name                             string                 `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	Objective                        string                 `protobuf:"bytes,20,opt,name=objective,proto3" json:"objective,omitempty"`
	PrimaryAttribution               string                 `protobuf:"bytes,21,opt,name=primary_attribution,json=primaryAttribution,proto3" json:"primary_attribution,omitempty"`
	SmartPromotionType               string                 `protobuf:"bytes,22,opt,name=smart_promotion_type,json=smartPromotionType,proto3" json:"smart_promotion_type,omitempty"`
	SourceCampaignId                 int64                  `protobuf:"varint,23,opt,name=source_campaign_id,json=sourceCampaignId,proto3" json:"source_campaign_id,omitempty"`
	SpecialAdCategory                string                 `protobuf:"bytes,24,opt,name=special_ad_category,json=specialAdCategory,proto3" json:"special_ad_category,omitempty"`
	SpendCap                         string                 `protobuf:"bytes,25,opt,name=spend_cap,json=spendCap,proto3" json:"spend_cap,omitempty"`
	StartTime                        *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Status                           string                 `protobuf:"bytes,27,opt,name=status,proto3" json:"status,omitempty"`
	StopTime                         *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	ToplineId                        int64                  `protobuf:"varint,29,opt,name=topline_id,json=toplineId,proto3" json:"topline_id,omitempty"`
	UpdatedTime                      *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_campaign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_model_campaign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_model_campaign_proto_rawDescGZIP(), []int{0}
}

func (x *Campaign) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Campaign) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Campaign) GetBidStrategy() string {
	if x != nil {
		return x.BidStrategy
	}
	return ""
}

func (x *Campaign) GetBoostedObjectId() int64 {
	if x != nil {
		return x.BoostedObjectId
	}
	return 0
}

func (x *Campaign) GetBudgetRebalanceFlag() bool {
	if x != nil {
		return x.BudgetRebalanceFlag
	}
	return false
}

func (x *Campaign) GetBudgetRemaining() int64 {
	if x != nil {
		return x.BudgetRemaining
	}
	return 0
}

func (x *Campaign) GetBuyingType() string {
	if x != nil {
		return x.BuyingType
	}
	return ""
}

func (x *Campaign) GetCanCreateBrandLiftStudy() bool {
	if x != nil {
		return x.CanCreateBrandLiftStudy
	}
	return false
}

func (x *Campaign) GetCanUseSpendCap() bool {
	if x != nil {
		return x.CanUseSpendCap
	}
	return false
}

func (x *Campaign) GetConfiguredStatus() string {
	if x != nil {
		return x.ConfiguredStatus
	}
	return ""
}

func (x *Campaign) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Campaign) GetDailyBudget() int64 {
	if x != nil {
		return x.DailyBudget
	}
	return 0
}

func (x *Campaign) GetEffectiveStatus() string {
	if x != nil {
		return x.EffectiveStatus
	}
	return ""
}

func (x *Campaign) GetHasSecondarySkadnetworkReporting() bool {
	if x != nil {
		return x.HasSecondarySkadnetworkReporting
	}
	return false
}

func (x *Campaign) GetIsBudgetScheduleEnabled() bool {
	if x != nil {
		return x.IsBudgetScheduleEnabled
	}
	return false
}

func (x *Campaign) GetIsSkadnetworkAttribution() bool {
	if x != nil {
		return x.IsSkadnetworkAttribution
	}
	return false
}

func (x *Campaign) GetLastBudgetTogglingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBudgetTogglingTime
	}
	return nil
}

func (x *Campaign) GetLifetimeBudget() int64 {
	if x != nil {
		return x.LifetimeBudget
	}
	return 0
}

func (x *Campaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Campaign) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

func (x *Campaign) GetPrimaryAttribution() string {
	if x != nil {
		return x.PrimaryAttribution
	}
	return ""
}

func (x *Campaign) GetSmartPromotionType() string {
	if x != nil {
		return x.SmartPromotionType
	}
	return ""
}

func (x *Campaign) GetSourceCampaignId() int64 {
	if x != nil {
		return x.SourceCampaignId
	}
	return 0
}

func (x *Campaign) GetSpecialAdCategory() string {
	if x != nil {
		return x.SpecialAdCategory
	}
	return ""
}

func (x *Campaign) GetSpendCap() string {
	if x != nil {
		return x.SpendCap
	}
	return ""
}

func (x *Campaign) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Campaign) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Campaign) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *Campaign) GetToplineId() int64 {
	if x != nil {
		return x.ToplineId
	}
	return 0
}

func (x *Campaign) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

var File_model_campaign_proto protoreflect.FileDescriptor

var file_model_campaign_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x0a, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x61,
	0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x66, 0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a,
	0x23, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x68, 0x61, 0x73, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a,
	0x69, 0x73, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x69, 0x73, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x73, 0x5f,
	0x73, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69,
	0x73, 0x53, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_campaign_proto_rawDescOnce sync.Once
	file_model_campaign_proto_rawDescData = file_model_campaign_proto_rawDesc
)

func file_model_campaign_proto_rawDescGZIP() []byte {
	file_model_campaign_proto_rawDescOnce.Do(func() {
		file_model_campaign_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_campaign_proto_rawDescData)
	})
	return file_model_campaign_proto_rawDescData
}

var file_model_campaign_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_model_campaign_proto_goTypes = []interface{}{
	(*Campaign)(nil),              // 0: meta_marketing_extract.Campaign
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_model_campaign_proto_depIdxs = []int32{
	1, // 0: meta_marketing_extract.Campaign.created_time:type_name -> google.protobuf.Timestamp
	1, // 1: meta_marketing_extract.Campaign.last_budget_toggling_time:type_name -> google.protobuf.Timestamp
	1, // 2: meta_marketing_extract.Campaign.start_time:type_name -> google.protobuf.Timestamp
	1, // 3: meta_marketing_extract.Campaign.stop_time:type_name -> google.protobuf.Timestamp
	1, // 4: meta_marketing_extract.Campaign.updated_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_model_campaign_proto_init() }
func file_model_campaign_proto_init() {
	if File_model_campaign_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_campaign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_campaign_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_campaign_proto_goTypes,
		DependencyIndexes: file_model_campaign_proto_depIdxs,
		MessageInfos:      file_model_campaign_proto_msgTypes,
	}.Build()
	File_model_campaign_proto = out.File
	file_model_campaign_proto_rawDesc = nil
	file_model_campaign_proto_goTypes = nil
	file_model_campaign_proto_depIdxs = nil
}
